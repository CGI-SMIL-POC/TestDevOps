package com.cgi.poc.dw.db;

import com.cgi.poc.dw.core.Asset;
import io.dropwizard.hibernate.AbstractDAO;
import java.util.List;
import java.util.Optional;
import org.hibernate.SessionFactory;

/**
 * Data Access Object to manipulate assets.
 *
 */
public class AssetDAO extends AbstractDAO<Asset> {

    /**
     * Constructor that initializes assets DAO.
     *
     * @param sessionFactory Hibernate Session Factory.
     */
    public AssetDAO(SessionFactory sessionFactory) {
        super(sessionFactory);
    }

    /**
     * Find assets for a particular user.
     *
     * @param id the id of the user.
     * @return List of all assets stored by the user identified by id.
     */
    public List<Asset> findByUserId(int id) {
        return list(namedQuery("Asset.findByUserId")
                .setParameter("id", id));
    }

    /**
     * Method to find the asset with a particular id.
     *
     * @param id the id of a asset.
     * @return An Optional with a asset if found and an empty Optional
     * otherwise.
     */
    public Optional<Asset> findById(int id) {
        return Optional.ofNullable(get(id));
    }

    /**
     * Method looks for the asset characterized by id for a user
     * characterized by userId.
     *
     * @param id the id of a asset to look for.
     * @param userId the id of the user owner of the asset.
     * @return Optional containing the asset or an empty Optional if the
     * asset was not found.
     */
    public Optional<Asset> findByIdAndUserId(int id, int userId) {
        return Optional.ofNullable(
                uniqueResult(
                        namedQuery("Asset.findByIdAndUserId")
                        .setParameter("id", id)
                        .setParameter("userId", userId)
                )
        );
    }

    /**
     * Method saves a asset; either creates new or modifies an existent one.
     *
     * @param asset a asset to be saved.
     * @return the saved asset updated with data generated by the database.
     */
    public Asset save(Asset asset) {
        return persist(asset);
    }

    /**
     * Method removes the asset from the database.
     *
     * @param id the id of the asset to be deleted.
     */
    public void delete(Integer id) {
        namedQuery("Asset.remove")
                .setParameter("id", id)
                .executeUpdate();
    }
}
